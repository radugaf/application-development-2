[{"/home/radu/Documents/work/application-development-2/frontend/src/index.js":"1","/home/radu/Documents/work/application-development-2/frontend/src/App.js":"2","/home/radu/Documents/work/application-development-2/frontend/src/components/TestComponent.js":"3","/home/radu/Documents/work/application-development-2/frontend/src/components/Login.js":"4","/home/radu/Documents/work/application-development-2/frontend/src/components/ForgotPassword.js":"5","/home/radu/Documents/work/application-development-2/frontend/src/components/PrivateRoute.js":"6","/home/radu/Documents/work/application-development-2/frontend/src/containers/Home.js":"7","/home/radu/Documents/work/application-development-2/frontend/src/containers/Supplier/ProductsPage.js":"8","/home/radu/Documents/work/application-development-2/frontend/src/redux/store.js":"9","/home/radu/Documents/work/application-development-2/frontend/src/components/Navbar.js":"10","/home/radu/Documents/work/application-development-2/frontend/src/containers/Restaurant/WishList.js":"11","/home/radu/Documents/work/application-development-2/frontend/src/containers/Restaurant/Cart.js":"12","/home/radu/Documents/work/application-development-2/frontend/src/containers/Supplier/Inquiries.js":"13","/home/radu/Documents/work/application-development-2/frontend/src/containers/Supplier/Orders.js":"14","/home/radu/Documents/work/application-development-2/frontend/src/containers/Supplier/addproductmodal.js":"15","/home/radu/Documents/work/application-development-2/frontend/src/components/TableProducts.js":"16","/home/radu/Documents/work/application-development-2/frontend/src/requests.js":"17","/home/radu/Documents/work/application-development-2/frontend/src/components/Table/iTableModalsAccept.js":"18","/home/radu/Documents/work/application-development-2/frontend/src/components/Table/iTableModalsDecline.js":"19","/home/radu/Documents/work/application-development-2/frontend/src/components/Table/iTableModalsPartial.js":"20","/home/radu/Documents/work/application-development-2/frontend/src/redux/reducers/rootReducer.js":"21","/home/radu/Documents/work/application-development-2/frontend/src/redux/actions/products.js":"22","/home/radu/Documents/work/application-development-2/frontend/src/redux/reducers/products.js":"23"},{"size":254,"mtime":1608481395936,"results":"24","hashOfConfig":"25"},{"size":2034,"mtime":1608481395936,"results":"26","hashOfConfig":"25"},{"size":3069,"mtime":1608481395936,"results":"27","hashOfConfig":"25"},{"size":2807,"mtime":1608481395936,"results":"28","hashOfConfig":"25"},{"size":1545,"mtime":1608481395936,"results":"29","hashOfConfig":"25"},{"size":754,"mtime":1608481395936,"results":"30","hashOfConfig":"25"},{"size":2393,"mtime":1606671250038,"results":"31","hashOfConfig":"25"},{"size":8401,"mtime":1608481395936,"results":"32","hashOfConfig":"25"},{"size":441,"mtime":1608481395936,"results":"33","hashOfConfig":"25"},{"size":3099,"mtime":1608489793751,"results":"34","hashOfConfig":"25"},{"size":5227,"mtime":1608489793751,"results":"35","hashOfConfig":"25"},{"size":9153,"mtime":1608489793751,"results":"36","hashOfConfig":"25"},{"size":14915,"mtime":1608489793751,"results":"37","hashOfConfig":"25"},{"size":5986,"mtime":1608489793751,"results":"38","hashOfConfig":"25"},{"size":2947,"mtime":1608481395936,"results":"39","hashOfConfig":"25"},{"size":1530,"mtime":1608481395936,"results":"40","hashOfConfig":"25"},{"size":1256,"mtime":1608481395936,"results":"41","hashOfConfig":"25"},{"size":907,"mtime":1608481395936,"results":"42","hashOfConfig":"25"},{"size":863,"mtime":1607464651007,"results":"43","hashOfConfig":"25"},{"size":1324,"mtime":1608481395936,"results":"44","hashOfConfig":"25"},{"size":338,"mtime":1608481395936,"results":"45","hashOfConfig":"25"},{"size":13537,"mtime":1608489793751,"results":"46","hashOfConfig":"25"},{"size":1553,"mtime":1608481395936,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"wp7xtr",{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"50"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"50"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"50"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"50"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"50"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"50"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"50"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"50"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"50"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"50"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"50"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"50"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"50"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"50"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112"},"/home/radu/Documents/work/application-development-2/frontend/src/index.js",[],["113","114"],"/home/radu/Documents/work/application-development-2/frontend/src/App.js",["115","116"],"import React from \"react\";\nimport MainCss from \"./assets/main/main.scss\";\nimport { BrowserRouter, Route } from \"react-router-dom\";\nimport ReduxToastr from \"react-redux-toastr\";\n\n//Components\nimport Navbar from \"./components/Navbar\";\nimport TestComponent from \"./components/TestComponent\";\n\nimport Login from \"./components/Login\";\nimport ForgotPassword from \"./components/ForgotPassword\";\nimport PrivateRoute from \"./components/PrivateRoute\";\n\n// Containers\nimport Home from \"./containers/Home\";\n\n// --> SUPPLIER <--\nimport ProductsPage from \"./containers/Supplier/ProductsPage\";\n\nimport Inquiries from \"./containers/Supplier/Inquiries\";\n\nimport Orders from \"./containers/Supplier/Orders\";\n\n// --> RESTAURANT <--\nimport WishList from \"./containers/Restaurant/WishList\";\nimport Cart from \"./containers/Restaurant/Cart\";\n\nimport { Provider } from \"react-redux\";\n\nimport { store } from \"./redux/store\";\n\n// Alert Options\nconst alertOptions = {\n  timeout: 3000,\n  newestOnTop: false,\n  position: \"top-right\",\n  preventDuplicates: true,\n  transitionIn: \"fadeIn\",\n  transitionOut: \"fadeOut\",\n  progressBar: true,\n  closeOnToastrClick: true,\n};\n\nconst App = () => {\n  return (\n    <>\n      <Provider store={store}>\n        <BrowserRouter>\n          <Navbar />\n          <ReduxToastr\n            getState={(state) => state.toastr} // This is the default\n            {...alertOptions}\n          />\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/test\" exact component={TestComponent} />\n          <Route path=\"/cart\" exact component={Cart} />\n          <Route path=\"/wishlist\" exact component={WishList} />\n          <Route path=\"/inquiries\" exact component={Inquiries} />\n          <Route path=\"/products\" exact component={ProductsPage} />\n          <Route path=\"/orders\" exact component={Orders} />\n          <Route path=\"/login\" exact component={Login} />\n          <Route path=\"/forgot-password\" exact component={ForgotPassword} />\n        </BrowserRouter>\n      </Provider>\n    </>\n  );\n};\n\nexport default App;\n","/home/radu/Documents/work/application-development-2/frontend/src/components/TestComponent.js",["117"],"import React, { Component, useState } from \"react\";\nimport { Icon } from 'semantic-ui-react'\n\n// IMPORT TABLE COMPONENTS\nimport ITableModalsAccept from './Table/iTableModalsAccept'\nimport ITableModalsDecline from './Table/iTableModalsDecline'\nimport ITableModalsPartial from './Table/iTableModalsPartial'\n\n\n\nclass TestComponent extends Component {\n\n\n  render() {\n\n\n    return (\n\n      <>\n      <table className=\"table-container\">\n        <tr>\n          <td className=\"table-header-container\" colspan=\"6\">\n            <div className=\"table-header\">\n              <span className=\"verde\">Lista Produse Pending</span>\n              <div className=\"table-search-field-container\">\n                <span className=\"table-search-field-name\">Cauta :</span>\n                <input className=\"table-search-field-input\" type=\"search\" placeholder=\"Introdu criteriile\"></input>\n                <i class=\"table-search-field-icon\"><Icon name='search' /></i>\n              </div>\n            </div>\n          </td>\n        </tr>\n        <tr>\n          <th>\n            #\n          </th>\n          <th>\n            Client\n          </th>\n          <th>\n            Data Comanda\n          </th>\n          <th>\n            Status\n          </th>\n          <th>\n            Valoare Comanda\n          </th>\n          <th>\n            Actiune\n          </th>\n        </tr>\n        <tr>\n          <td>\n            1\n          </td>\n          <td>\n            Edesia\n          </td>\n          <td>\n            08.12.2020\n          </td>\n          <td>\n            Pending\n          </td>\n          <td>\n            120 Lei\n          </td>\n          <td>\n            Click Here\n          </td>\n        </tr>\n        <tr className=\"\">\n          <td colspan=\"6\">\n            <div>\n            <div>\n              <table className=\"table-details-container\">\n              <tr>\n                <th>\n                  #\n                </th>\n                <th>\n                  Client\n                </th>\n                <th>\n                  Data Comanda\n                </th>\n                <th>\n                  Status\n                </th>\n                <th>\n                  Valoare Comanda\n                </th>\n                <th>\n                  Actiune\n                </th>\n              </tr>\n              <tr>\n                <td>\n                  1\n                </td>\n                <td>\n                  Edesia\n                </td>\n                <td>\n                  08.12.2020\n                </td>\n                <td>\n                  Pending\n                </td>\n                <td>\n                  120 Lei\n                </td>\n                <td>\n                  Click Here\n                </td>\n              </tr>\n              </table>\n            </div>\n            <div className=\"table-modals\">\n            <ITableModalsAccept />\n            <ITableModalsDecline />\n            <ITableModalsPartial />\n            </div>\n            </div>\n          </td>\n        </tr>\n      </table>\n      </>\n    );\n  }\n}\n\nexport default TestComponent;\n","/home/radu/Documents/work/application-development-2/frontend/src/components/Login.js",[],"/home/radu/Documents/work/application-development-2/frontend/src/components/ForgotPassword.js",["118","119"],"import React from \"react\";\nimport { Grid, Image, Button, Checkbox, Form, Card, Divider, Header } from 'semantic-ui-react'\n\nclass ForgotPassword extends React.Component {\n  render() {\n    return (\n        <Grid verticalAlign='middle' centered fluid className=\"custom-login-wrapper\">\n          <Grid.Row>\n            <Grid.Column computer=\"6\" mobile=\"15\" tablet=\"12\">\n              <Card fluid>\n                <Card.Content>\n                  <Card.Header textAlign='center'>\n                  <Image src='https://react.semantic-ui.com/images/wireframe/image.png' size='tiny' alt='Logo'/>\n                  </Card.Header>\n                  <Divider horizontal>Recuperare parola</Divider>\n                  <Form>\n                   <Form.Field>\n                     <label>Adresa de E-mail</label>\n                     <input placeholder='Adresa de E-mail' />\n                   </Form.Field>\n                   <Form.Field>\n                     <label>Parola Noua</label>\n                     <input placeholder='Parola dvs.' type='password'/>\n                   </Form.Field>\n                   <Form.Field>\n                     <label>Confirma parola noua</label>\n                     <input placeholder='Parola dvs.' type='password'/>\n                   </Form.Field>\n                   <Button fluid color='green' type='submit'>Schimba parola</Button>\n                 </Form>\n                </Card.Content>\n              </Card>\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n    );\n  }\n}\n\nexport default ForgotPassword;\n","/home/radu/Documents/work/application-development-2/frontend/src/components/PrivateRoute.js",["120"],"import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nconst PrivateRoute = ({ component: Component, auth, ...rest }) => {\n  const localStorage = window.localStorage.getItem(\"token\");\n  console.log({ auth });\n  return (\n    <Route\n      {...rest}\n      render={(props) => {\n        {\n          console.log(props);\n        }\n        if (auth.isLoading) {\n          return <h2>Loading ...</h2>;\n        } else if (!localStorage) {\n          return <Redirect to=\"/login\" />;\n        } else {\n          return <Component {...props} />;\n        }\n      }}\n    />\n  );\n};\nconst maptStateToProps = (state) => ({\n  auth: state.products,\n});\n\nexport default connect(maptStateToProps)(PrivateRoute);\n","/home/radu/Documents/work/application-development-2/frontend/src/containers/Home.js",["121","122","123","124","125","126","127"],"import React from \"react\";\nimport imageSquare from \"../assets/img/image-square.png\";\n\nclass Home extends React.Component {\n  render() {\n    return (\n      \n      <div className=\"ui three column grid\">\n        <div calssName=\"column\">\n          <div calssName=\"ui segment\">\n            <div className=\"ui card\">\n              <div className=\"content\">\n                <a className=\"header\">Kristy</a>\n                <div className=\"meta\">\n                  <span className=\"date\">Joined in 2013</span>\n                </div>\n                <div className=\"description\">\n                  Kristy is an art director living in New York.\n                </div>\n              </div>\n              <div className=\"extra content\">\n                <a>\n                  <i className=\"user icon\"></i>\n                  22 Friends\n                </a>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div calssName=\"column\">\n          <div calssName=\"ui segment\">\n            <div className=\"ui card\">\n              <div className=\"content\">\n                <a className=\"header\">Kristy</a>\n                <div className=\"meta\">\n                  <span className=\"date\">Joined in 2013</span>\n                </div>\n                <div className=\"description\">\n                  Kristy is an art director living in New York.\n                </div>\n              </div>\n              <div className=\"extra content\">\n                <a>\n                  <i className=\"user icon\"></i>\n                  22 Friends\n                </a>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div calssName=\"column\">\n          <div calssName=\"ui segment\">\n            <div className=\"ui card\">\n              <div className=\"content\">\n                <a className=\"header\">Kristy</a>\n                <div className=\"meta\">\n                  <span className=\"date\">Joined in 2013</span>\n                </div>\n                <div className=\"description\">\n                  Kristy is an art director living in New York.\n                </div>\n              </div>\n              <div className=\"extra content\">\n                <a>\n                  <i className=\"user icon\"></i>\n                  22 Friends\n                </a>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","/home/radu/Documents/work/application-development-2/frontend/src/containers/Supplier/ProductsPage.js",["128","129","130","131","132","133","134"],"import React, { useState, useEffect } from \"react\";\nimport { Grid, Card, Image, Button } from \"semantic-ui-react\";\nimport axios from \"axios\";\nimport { connect } from \"react-redux\";\nimport { toastr } from \"react-redux-toastr\";\n\nimport Addproductmodal from \"./addproductmodal.js\";\n\nimport {\n  ProductFetch,\n  AddToCart,\n  SetToken,\n} from \"../../redux/actions/products\";\nimport TableProducts from \"../../components/TableProducts.js\";\nimport { URL, CREDENTIALS } from \"../../requests\";\n\nconst ProductsPage = ({\n  ProductFetch,\n  AddToCart,\n  SetToken,\n  products,\n  authErrors,\n}) => {\n  // const [products, setProducts] = useState([]);\n  const [formData, setFormData] = useState({\n    product_id: 0, //here is product id is given by default\n  });\n  console.log({ formData });\n  const { product_id } = formData;\n\n  useEffect(() => {\n    ProductFetch();\n  }, []);\n\n  const onChange = (e) =>\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n\n  const onSubmit = (e, product_id, type) => {\n    e.preventDefault();\n    AddToCart({ product_id: product_id });\n    toastr.success(`Add To ${type}`, `Add To ${type} successfully added `);\n\n    // const config = {\n    //   headers: {\n    //     \"Content-Type\": \"application/json\",\n    //     Authorization: `Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjExOTA5MzE5LCJqdGkiOiJiZDg2MDVmMDQ5ZTg0OTFkODY2NzM4ZTUyM2VkZWU4MCIsInVzZXJfaWQiOjF9.V-oLJKAsRYCbon1fm_zUpWYalEFI9QrNykaMNiK_T6E`,\n    //   },\n    // };\n\n    // axios\n    //   .post(\n    //     \"http://localhost:8000/api/v1/add-product-in-cart/\",\n    //     {\n    //       product_id,\n    //     },\n    //     config\n    //   )\n    //   .then((res) => {\n    //     console.log(res);\n    //   })\n    //   .catch((err) => {\n    //     console.log(err);\n    //   });\n  };\n\n  console.log({ products });\n  return (\n    <Grid columns={1} textAlign=\"center\">\n      <Grid.Row>\n        <Grid.Column width=\"14\">\n          <Grid columns={4}>\n            <Grid.Row>\n              {products &&\n                products.map((product) => (\n                  <Grid.Column width=\"4\">\n                    <Card fluid className=\"border-box\">\n                      <Grid columns={2}>\n                        <Grid.Row>\n                          <Grid.Column\n                            width=\"6\"\n                            className=\"text-break\"\n                            verticalAlign=\"middle\"\n                          >\n                            <Image\n                              src={`${URL}${product.image_main}`}\n                              size=\"small\"\n                            />\n                          </Grid.Column>\n                          <Grid.Column\n                            width=\"10\"\n                            className=\"text-break padding10\"\n                            textAlign=\"left\"\n                          >\n                            <p>Nume : {product.title}</p>\n                            <p>Cantitate : {product.total_stock}</p>\n                            <p>Pret : {product.price}</p>\n                            <p>\n                              Instant Delivery :{\" \"}\n                              {product.instant_delivery ? \"Yes\" : \"No\"}\n                            </p>\n                            <Button\n                              color={\n                                product.instant_delivery ? \"teal\" : \"orange\"\n                              }\n                              onClick={(e) => {\n                                setFormData({\n                                  ...formData,\n                                  product_id: product.id,\n                                });\n                                onSubmit(\n                                  e,\n                                  product.id,\n                                  product.instant_delivery ? \"Cart\" : \"Wishlist\"\n                                );\n                              }}\n                            >\n                              {product.instant_delivery\n                                ? \"Adauga in Cos\"\n                                : \"Adauga in Wishlist\"}\n                            </Button>\n                          </Grid.Column>\n                        </Grid.Row>\n                      </Grid>\n                    </Card>\n                  </Grid.Column>\n                ))}\n\n              {/* <Grid.Column width=\"4\">\n                <Card fluid className=\"border-box\">\n                  <Grid columns={2}>\n                    <Grid.Row>\n                      <Grid.Column\n                        width=\"6\"\n                        className=\"text-break\"\n                        verticalAlign=\"middle\"\n                      >\n                        <Image\n                          src=\"https://react.semantic-ui.com/images/wireframe/image.png\"\n                          size=\"small\"\n                        />\n                      </Grid.Column>\n                      <Grid.Column\n                        width=\"10\"\n                        className=\"text-break padding10\"\n                        textAlign=\"left\"\n                      >\n                        <p>Nume : Nume.produs</p>\n                        <p>Cantitate : Cantitate.furnizor.maxima</p>\n                        <p>Pret : Pret.Produs</p>\n                        <p>Instant Delivery : Instant.Delivery.False</p>\n                        <Button color=\"orange\">Adauga in Wishlist</Button>\n                      </Grid.Column>\n                    </Grid.Row>\n                  </Grid>\n                </Card>\n              </Grid.Column>\n              <Grid.Column width=\"4\">\n                <Card fluid className=\"border-box\">\n                  <Grid columns={2}>\n                    <Grid.Row>\n                      <Grid.Column\n                        width=\"6\"\n                        className=\"text-break\"\n                        verticalAlign=\"middle\"\n                      >\n                        <Image\n                          src=\"https://react.semantic-ui.com/images/wireframe/image.png\"\n                          size=\"small\"\n                        />\n                      </Grid.Column>\n                      <Grid.Column\n                        width=\"10\"\n                        className=\"text-break padding10\"\n                        textAlign=\"left\"\n                      >\n                        <p>Nume : Nume.produs</p>\n                        <p>Cantitate : Cantitate.furnizor.maxima</p>\n                        <p>Pret : Pret.Produs</p>\n                        <p>Instant Delivery : Instant.Delivery.True</p>\n                        <Button color=\"teal\">Adauga in Cos</Button>\n                      </Grid.Column>\n                    </Grid.Row>\n                  </Grid>\n                </Card>\n              </Grid.Column>\n              <Grid.Column width=\"4\">\n                <Card fluid className=\"border-box\">\n                  <Grid columns={2}>\n                    <Grid.Row>\n                      <Grid.Column\n                        width=\"6\"\n                        className=\"text-break\"\n                        verticalAlign=\"middle\"\n                      >\n                        <Image\n                          src=\"https://react.semantic-ui.com/images/wireframe/image.png\"\n                          size=\"small\"\n                        />\n                      </Grid.Column>\n                      <Grid.Column\n                        width=\"10\"\n                        className=\"text-break padding10\"\n                        textAlign=\"left\"\n                      >\n                        <p>Nume : Nume.produs</p>\n                        <p>Cantitate : Cantitate.furnizor.maxima</p>\n                        <p>Pret : Pret.Produs</p>\n                        <p>Instant Delivery : Instant.Delivery.False</p>\n                        <Button color=\"orange\">Adauga in Wishlist</Button>\n                      </Grid.Column>\n                    </Grid.Row>\n                  </Grid>\n                </Card>\n              </Grid.Column>\n             */}\n            </Grid.Row>\n          </Grid>\n        </Grid.Column>\n      </Grid.Row>\n    </Grid>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    products: state.products.productsDetails,\n    authErrors: state.products.error,\n  };\n};\nexport default connect(mapStateToProps, {\n  ProductFetch,\n  AddToCart,\n  SetToken,\n})(ProductsPage);\n","/home/radu/Documents/work/application-development-2/frontend/src/redux/store.js",[],"/home/radu/Documents/work/application-development-2/frontend/src/components/Navbar.js",["135","136","137"],"import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Menu, Dropdown } from \"semantic-ui-react\";\nimport { Logout } from \"../redux/actions/products\";\n\nimport { connect } from \"react-redux\";\nclass Navbar extends React.Component {\n  state = {};\n\n  handleItemClick = (e, { name }) => this.setState({ activeItem: name });\n\n  render() {\n    const { activeItem } = this.state;\n    const { user } = this.props;\n    const userType = user;\n    console.log({ user });\n    return (\n      <Menu>\n        {userType && !userType.is_supplier && (\n          <>\n            <Link to=\"/cart\">\n              <Menu.Item\n                name=\"cart\"\n                active={activeItem === \"cart\"}\n                onClick={this.handleItemClick}\n              >\n                Cart\n              </Menu.Item>\n            </Link>\n\n            <Link to=\"/wishlist\">\n              <Menu.Item\n                name=\"wishlist\"\n                active={activeItem === \"wishlist\"}\n                onClick={this.handleItemClick}\n              >\n                WishList\n              </Menu.Item>\n            </Link>\n          </>\n        )}\n\n        {userType && userType.is_supplier && (\n          <Link to=\"/inquiries\">\n            <Menu.Item\n              name=\"inquiries\"\n              active={activeItem === \"inquiries\"}\n              onClick={this.handleItemClick}\n            >\n              Inquiries\n            </Menu.Item>\n          </Link>\n        )}\n\n        <Link to=\"/products\">\n          <Menu.Item\n            name=\"products\"\n            active={activeItem === \"products\"}\n            onClick={this.handleItemClick}\n          >\n            Products\n          </Menu.Item>\n        </Link>\n\n        {user && Object.keys(user).length <= 0 && (\n          <Link to=\"/login\">\n            <Menu.Item\n              name=\"login\"\n              active={activeItem === \"login\"}\n              onClick={this.handleItemClick}\n            >\n              Login\n            </Menu.Item>\n          </Link>\n        )}\n        {userType && userType.is_supplier && (\n          <Link to=\"/orders\">\n            <Menu.Item\n              name=\"orders\"\n              active={activeItem === \"orders\"}\n              onClick={this.handleItemClick}\n            >\n              Orders\n            </Menu.Item>\n          </Link>\n        )}\n\n        <Link to=\"/forgot-password\">\n          <Menu.Item\n            name=\"ForgotPassword\"\n            active={activeItem === \"ForgotPassword\"}\n            onClick={this.handleItemClick}\n          >\n            Forgot Password\n          </Menu.Item>\n        </Link>\n        {user && Object.keys(user).length > 0 && (\n          <button\n            onClick={(e) => {\n              e.preventDefault();\n              localStorage.removeItem(\"token\");\n              window.location.href = \"/login\";\n\n              // Logout();\n            }}\n          >\n            Logout\n          </button>\n        )}\n      </Menu>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    user: state.products.user,\n  };\n};\nexport default connect(mapStateToProps, {})(Navbar);\n","/home/radu/Documents/work/application-development-2/frontend/src/containers/Restaurant/WishList.js",["138","139","140","141","142"],"import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Grid, Image, Input, Divider, Button } from \"semantic-ui-react\";\nimport { connect } from \"react-redux\";\nimport { toastr } from \"react-redux-toastr\";\n\nimport {\n  SetToken,\n  GetAddToCart,\n  DeleteCart,\n  UpdateCart,\n  AddInquiry,\n} from \"../../redux/actions/products\";\nimport { URL, CREDENTIALS } from \"../../requests\";\n\nconst WishList = ({\n  carts,\n  GetAddToCart,\n  DeleteCart,\n  UpdateCart,\n  SetToken,\n  AddInquiry,\n}) => {\n  useEffect(() => {\n    GetAddToCart();\n  }, []);\n\n  const onDeleteCart = async (e, product_item_id) => {\n    await DeleteCart({ product_id: product_item_id });\n    GetAddToCart();\n    toastr.success(\n      \"Wishlist Product Deleted\",\n      \"Wishlist product successfully deleted\"\n    );\n    window.location.href = \"/wishlist\";\n  };\n\n  const UpdateQty = async (e, product_item_id, price) => {\n    console.log({ value: e.target.value });\n    if (+e.target.value >= 1) {\n      await UpdateCart({\n        product_id: product_item_id,\n        quantity: +e.target.value,\n        price,\n      });\n      GetAddToCart();\n      // window.location.href = \"/wishlist\";\n      toastr.success(\"WishList Qty Update\", \"Cantitate dorita updated\");\n    } else {\n      toastr.error(\"Cantitate dorita not less than 1\");\n    }\n  };\n\n  const onFormSubmit = (e, product_items_id) => {\n    e.preventDefault();\n    AddInquiry({ product_id: [product_items_id] });\n    toastr.success(\"Add Product in Inquiries\", \"Product added successfully\");\n  };\n\n  return (\n    <>\n      <Grid columns={1} textAlign=\"center\">\n        <Grid.Row>\n          <Grid.Column width=\"14\">\n            <Grid columns={3} textAlign=\"left\">\n              {carts &&\n                carts.not_instant_delivery_items &&\n                carts.not_instant_delivery_items.map((cart) => (\n                  <Grid.Row>\n                    <Grid.Column\n                      width=\"1\"\n                      textAlign=\"center\"\n                      verticalAlign=\"middle\"\n                    >\n                      <button\n                        onClick={(e) => onDeleteCart(e, cart.product_item_id)}\n                      >\n                        Delete\n                      </button>\n                    </Grid.Column>\n                    <Grid.Column width=\"2\">\n                      <Image\n                        src={`${URL}${cart.product_image_url}`}\n                        size=\"medium\"\n                      />\n                    </Grid.Column>\n                    <Grid.Column width=\"13\" stretched>\n                      <p>Nume : {cart.product_title}</p>\n                      <p>Cantitate : {cart.product_total_stock || \"\"}</p>\n                      <p>Pret : {cart.product_original_price}</p>\n                      <p>Instant Delivery : No</p>\n                      <p>Qty: {cart.product_quantity}</p>\n                      <p>Editable : {cart.is_editable ? \"Yes\" : \"No\"}</p>\n                      <Input\n                        disabled={!cart.is_editable}\n                        label=\"Cantitate dorita\"\n                        placeholder=\"10 Buc\"\n                        onBlur={(e) => {\n                          UpdateQty(\n                            e,\n                            cart.product_item_id,\n                            cart.product_price\n                          );\n                        }}\n                      />\n                      <br />\n                      <Button\n                        color=\"orange\"\n                        onClick={(e) => onFormSubmit(e, cart.product_item_id)}\n                      >\n                        Cere Oferta\n                      </Button>\n                    </Grid.Column>\n                  </Grid.Row>\n                ))}\n\n              {/* <Grid.Row>\n                <Grid.Column width={16}>\n                  <Divider />\n                </Grid.Column>\n              </Grid.Row>\n\n              <Grid.Row>\n                <Grid.Column\n                  width=\"1\"\n                  textAlign=\"center\"\n                  verticalAlign=\"middle\"\n                >\n                  <a href=\"#\">Delete</a>\n                </Grid.Column>\n                <Grid.Column width=\"2\">\n                  <Image\n                    src=\"https://react.semantic-ui.com/images/wireframe/image.png\"\n                    size=\"medium\"\n                  />\n                </Grid.Column>\n                <Grid.Column width=\"13\" stretched>\n                  <p>Nume : Nume.produs</p>\n                  <p>Cantitate : Cantitate.furnizor.maxima</p>\n                  <p>Pret : Pret.Produs</p>\n                  <p>Instant Delivery : Instant.Delivery.False</p>\n                  <Input label=\"Cantitate dorita\" placeholder=\"10 Buc\" />\n                  <br />\n                  <Button color=\"orange\">Cere Oferta</Button>\n                </Grid.Column>\n              </Grid.Row>\n             */}\n            </Grid>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    carts: state.products.cartsDetails,\n  };\n};\n\nexport default connect(mapStateToProps, {\n  GetAddToCart,\n  SetToken,\n  DeleteCart,\n  UpdateCart,\n  AddInquiry,\n})(WishList);\n","/home/radu/Documents/work/application-development-2/frontend/src/containers/Restaurant/Cart.js",["143","144","145","146","147"],"import React, { useState, useEffect } from \"react\";\nimport {\n  Grid,\n  Card,\n  Icon,\n  Image,\n  Header,\n  Input,\n  Button,\n  Divider,\n  Table,\n} from \"semantic-ui-react\";\nimport { connect } from \"react-redux\";\nimport { toastr } from \"react-redux-toastr\";\n\nimport {\n  GetAddToCart,\n  DeleteCart,\n  UpdateCart,\n  PlaceOrder,\n  GetRestaurantOrder,\n  MarkAsDelivery,\n} from \"../../redux/actions/products\";\nimport { URL } from \"../../requests\";\n\nconst Cart = ({\n  carts,\n  GetAddToCart,\n  DeleteCart,\n  UpdateCart,\n  PlaceOrder,\n  GetRestaurantOrder,\n  pendingOrders,\n  MarkAsDelivery,\n  user,\n}) => {\n  const [formData, setFormData] = useState([]);\n  const userType = user;\n\n  useEffect(() => {\n    GetAddToCart();\n    GetRestaurantOrder();\n    carts &&\n      carts.instant_delivery_items &&\n      carts.instant_delivery_items.map((cart) => {\n        setFormData([\n          {\n            product_item_id: cart.product_item_id,\n            product_quantity: cart.product_quantity,\n          },\n        ]);\n      });\n  }, []);\n\n  const onDeleteCart = async (e, product_item_id) => {\n    e.preventDefault();\n\n    await DeleteCart({ product_id: product_item_id });\n    GetAddToCart();\n    window.location.href = \"/cart\";\n\n    toastr.success(\"Cart Product Deleted\", \"Cart product successfully deleted\");\n  };\n\n  const UpdateQty = (e, product_item_id, price) => {\n    console.log({ value: e.target.value });\n    if (+e.target.value >= 1) {\n      UpdateCart({\n        product_id: product_item_id,\n        quantity: +e.target.value,\n        price,\n      });\n      GetAddToCart();\n      toastr.success(\"Cart Qty Update\", \"Numar produse updated\");\n    } else {\n      toastr.error(\"Numar produse not less than 1\");\n    }\n  };\n\n  const AddToOrder = (e) => {\n    e.preventDefault();\n    const product_ids =\n      carts &&\n      carts.instant_delivery_items &&\n      carts.instant_delivery_items.map((cart) => cart.product_item_id);\n    console.log({ product_ids });\n    PlaceOrder({ product_id: product_ids });\n    GetAddToCart();\n    toastr.success(\"Create Order\", \"Order Created successfully\");\n  };\n\n  const acceptOrder = async (e, order_id) => {\n    e.preventDefault();\n    await MarkAsDelivery({ product_id: order_id });\n    GetRestaurantOrder();\n    toastr.success(\"Order Delivered\", \"Order Mark As Delivery successfully\");\n    window.location.href = \"/cart\";\n  };\n\n  const rejectOrder = (e) => {\n    e.preventDefault();\n  };\n\n  // TODO:RestaurantDetails\n  const nameOfRestaurant = \"Restaurant 1\";\n  const restaurantAddress = \"Rajkot\";\n  console.log({ formData });\n  return (\n    <>\n      <Grid columns={2} textAlign=\"center\" divided>\n        <Grid.Row width=\"14\">\n          <Grid.Column width=\"10\">\n            <Grid columns={3} fluid textAlign=\"left\">\n              {carts &&\n                carts.instant_delivery_items &&\n                carts.instant_delivery_items.map((cart) => {\n                  const currentQty = formData.filter(\n                    (data) => data.product_item_id === cart.product_item_id\n                  );\n\n                  const value =\n                    (currentQty &&\n                      currentQty[0] &&\n                      currentQty[0].product_quantity) ||\n                    1;\n\n                  return (\n                    <Grid.Row>\n                      <Grid.Column\n                        width=\"1\"\n                        textAlign=\"center\"\n                        verticalAlign=\"middle\"\n                      >\n                        <button\n                          onClick={(e) => onDeleteCart(e, cart.product_item_id)}\n                        >\n                          Delete\n                        </button>\n                      </Grid.Column>\n                      <Grid.Column width=\"2\">\n                        <Image\n                          src={`${URL}${cart.product_image_url}`}\n                          size=\"small\"\n                        />\n                      </Grid.Column>\n                      <Grid.Column width=\"11\" stretched>\n                        <p>Nume : {cart.product_title}</p>\n                        <p>Cantitate : {cart.product_total_stock}</p>\n                        <p>Pret : {cart.product_price}</p>\n                        <p>Instant Delivery : Yes</p>\n                        <p>Qty: {cart.product_quantity}</p>\n                        <Input\n                          min={1}\n                          label=\"Numar produse\"\n                          placeholder=\"ex: 10\"\n                          // value={cart.product_quantity}\n                          onBlur={(e) => {\n                            UpdateQty(\n                              e,\n                              cart.product_item_id,\n                              cart.product_price\n                            );\n                          }}\n                        />\n                      </Grid.Column>\n                    </Grid.Row>\n                  );\n                })}\n            </Grid>\n          </Grid.Column>\n\n          <Grid.Column width=\"4\" textAlign=\"left\" stretched>\n            <p>Nume Restaurant : {nameOfRestaurant}</p>\n            <p>Adresa Livreare : {restaurantAddress}</p>\n            <p>Valoare T.V.A : Valoare.TVA</p>\n            <p>Valaore totala comanda : Valoare.Totala</p>\n            <Button color=\"green\" onClick={(e) => AddToOrder(e)}>\n              Trimite Comanda\n            </Button>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n\n      <br />\n      <br />\n      <br />\n      <br />\n      <br />\n      {/* TODO:if User type Supplier then display */}\n\n      <Divider horizontal>\n        <Header as=\"h4\">\n          <Icon name=\"tag\" />\n          Comenzi in asteptare\n        </Header>\n      </Divider>\n\n      <br />\n      <br />\n      <br />\n      <br />\n      <br />\n\n      <Grid columns={1} textAlign=\"center\" divided>\n        <Grid.Row width=\"14\">\n          <Grid.Column width=\"14\">\n            <Table celled>\n              <Table.Header>\n                <Table.Row>\n                  <Table.HeaderCell>Nume Produs</Table.HeaderCell>\n                  <Table.HeaderCell>Cantitate Ceruta</Table.HeaderCell>\n                  <Table.HeaderCell>Cantitate Oferita</Table.HeaderCell>\n                  <Table.HeaderCell>Pret Bucata</Table.HeaderCell>\n                  <Table.HeaderCell>Pret Total</Table.HeaderCell>\n                  {userType && userType.is_supplier && (\n                    <>\n                      <Table.HeaderCell>Accepta</Table.HeaderCell>\n                      <Table.HeaderCell>Refuza</Table.HeaderCell>\n                    </>\n                  )}\n                </Table.Row>\n              </Table.Header>\n\n              <Table.Body>\n                {pendingOrders &&\n                  pendingOrders.map((pendingOrder) => {\n                    if (!pendingOrder.is_delivered) {\n                      return (\n                        <Table.Row>\n                          <Table.Cell positive>\n                            {pendingOrder.product_title}\n                          </Table.Cell>\n                          <Table.Cell positive>\n                            {pendingOrder.product_quantity}\n                          </Table.Cell>\n                          <Table.Cell positive>\n                            {pendingOrder.product_quantity}\n                          </Table.Cell>\n                          <Table.Cell positive>\n                            {pendingOrder.product_price}\n                          </Table.Cell>\n                          {/* TODO:Total */}\n                          <Table.Cell positive>50 Lei</Table.Cell>\n                          {userType && userType.is_supplier && (\n                            <>\n                              <Table.Cell textAlign=\"center\">\n                                <Button\n                                  color=\"teal\"\n                                  onClick={(e) =>\n                                    acceptOrder(e, pendingOrder.product_item_id)\n                                  }\n                                >\n                                  Accepta\n                                </Button>\n                              </Table.Cell>\n                              <Table.Cell textAlign=\"center\">\n                                <Button\n                                  color=\"red\"\n                                  onClick={(e) => rejectOrder(e)}\n                                >\n                                  Refuza\n                                </Button>\n                              </Table.Cell>\n                            </>\n                          )}\n                        </Table.Row>\n                      );\n                    }\n                  })}\n              </Table.Body>\n            </Table>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    carts: state.products.cartsDetails,\n    pendingOrders: state.products.restaurantOrdersDetails,\n    user: state.products.user,\n  };\n};\nexport default connect(mapStateToProps, {\n  GetAddToCart,\n  DeleteCart,\n  UpdateCart,\n  PlaceOrder,\n  GetRestaurantOrder,\n  MarkAsDelivery,\n})(Cart);\n","/home/radu/Documents/work/application-development-2/frontend/src/containers/Supplier/Inquiries.js",["148","149","150","151","152","153","154","155"],"import React, { useState, useEffect } from \"react\";\nimport TableProducts from \"../../components/TableProducts.js\";\nimport {\n  Form,\n  Button,\n  Table,\n  Grid,\n  Icon,\n  Modal,\n  Header,\n  Divider,\n  Input,\n} from \"semantic-ui-react\";\n\nimport ITableModalsAccept from \"../../components/Table/iTableModalsAccept\";\nimport ITableModalsDecline from \"../../components/Table/iTableModalsDecline\";\nimport ITableModalsPartial from \"../../components/Table/iTableModalsPartial\";\n\nimport { connect } from \"react-redux\";\nimport { toastr } from \"react-redux-toastr\";\n\nimport {\n  GetInquires,\n  DeclineInquiry,\n  UpdateInquiry,\n} from \"../../redux/actions/products\";\n\nconst Inquiries = ({\n  inquires,\n  GetInquires,\n  UpdateInquiry,\n  DeclineInquiry,\n  user,\n}) => {\n  // MODAL SETTINGS\n  const [open, setOpen] = React.useState(false);\n  const [secondOpen, setSecondOpen] = React.useState(false);\n  const [thirdOpen, setThirdOpen] = React.useState(false);\n  const [currentInquire, setCurrentInquire] = React.useState();\n  const [currentQty, setCurrentQty] = React.useState();\n\n  useEffect(() => {\n    GetInquires();\n  }, []);\n\n  const onReject = (e) => {\n    e.preventDefault();\n    DeclineInquiry({\n      product_id: currentInquire.product_item_id,\n      inquiry_id: currentInquire.enquiry_id,\n    });\n    GetInquires();\n    toastr.success(\"Reject Inquire\", \"Inquire Reject Successfully\");\n    setCurrentInquire();\n    setSecondOpen(false);\n    GetInquires();\n  };\n\n  const onUpdate = (e, type) => {\n    UpdateInquiry({\n      product_id: currentInquire.product_item_id,\n      inquiry_id: currentInquire.enquiry_id,\n      price: currentInquire.original_price,\n      quantity:\n        type === \"accept\" ? currentInquire.quantity_by_restaurant : currentQty,\n    });\n    GetInquires();\n    toastr.success(\"Accept Inquire\", \"Inquire Accept Successfully\");\n\n    setCurrentQty();\n    setCurrentInquire();\n    setThirdOpen(false);\n    setOpen(false);\n  };\n\n  return (\n    <>\n      <Grid columns={1} textAlign=\"center\" divided>\n        <Grid.Row width=\"14\">\n          <Grid.Column width=\"14\">\n            <Table celled>\n              {/* TODO:Remaning Parameter */}\n              <Table.Header>\n                <Table.Row>\n                  <Table.HeaderCell>Nume restaurant</Table.HeaderCell>\n                  <Table.HeaderCell>Data Comanda</Table.HeaderCell>\n                  <Table.HeaderCell>Valoare Comanda</Table.HeaderCell>\n                  <Table.HeaderCell>Timp ramas</Table.HeaderCell>\n                  <Table.HeaderCell>Valoare T.V.A</Table.HeaderCell>\n                  <Table.HeaderCell>Vezi Comanda</Table.HeaderCell>\n                </Table.Row>\n              </Table.Header>\n\n              <Table.Body>\n                <Table.Row>\n                  <Table.Cell warning>Edesia</Table.Cell>\n                  <Table.Cell warning>12.02.2020</Table.Cell>\n                  <Table.Cell warning>450 Ron</Table.Cell>\n                  <Table.Cell warning>4 Ore</Table.Cell>\n                  <Table.Cell warning>100 Ron</Table.Cell>\n                  <Table.Cell warning textAlign=\"center\">\n                    <Button color=\"Orange\">Vezi Detalii</Button>\n                  </Table.Cell>\n                </Table.Row>\n                <Table.Row>\n                  <Table.Cell positive colspan=\"7\" textAlign=\"center\">\n                    <Table celled>\n                      <Table.Header>\n                        <Table.Row>\n                          <Table.HeaderCell>Nume Produs</Table.HeaderCell>\n                          <Table.HeaderCell>Cantitate Ceruta</Table.HeaderCell>\n                          <Table.HeaderCell>Pret Buc</Table.HeaderCell>\n                          <Table.HeaderCell>Valoare TVA</Table.HeaderCell>\n                          <Table.HeaderCell>Valoare Comanda</Table.HeaderCell>\n                        </Table.Row>\n                      </Table.Header>\n\n                      <Table.Body>\n                        {Object.keys(inquires) &&\n                          Object.keys(inquires).map((key) => (\n                            <>\n                              <h2>{key}</h2>\n                              {inquires &&\n                                inquires[key] &&\n                                inquires[key].map((inquire) => (\n                                  <>\n                                    <Table.Row>\n                                      <Table.Cell positive>\n                                        Paste Barilla\n                                      </Table.Cell>\n                                      <Table.Cell positive>\n                                        {inquire.quantity_by_restaurant}\n                                      </Table.Cell>\n                                      <Table.Cell positive>\n                                        {inquire.price_by_restaurant}\n                                      </Table.Cell>\n                                      <Table.Cell positive>10 Lei</Table.Cell>\n                                      <Table.Cell positive>50 Lei</Table.Cell>\n                                    </Table.Row>\n                                    <Table.Row>\n                                      <Table.Cell\n                                        colspan=\"6\"\n                                        textAlign=\"center\"\n                                      >\n                                        <Modal\n                                          closeIcon\n                                          open={open}\n                                          trigger={\n                                            <Button color=\"green\">\n                                              Accepta\n                                            </Button>\n                                          }\n                                          onClose={() => {\n                                            setCurrentInquire();\n                                            setOpen(false);\n                                          }}\n                                          onOpen={() => {\n                                            setCurrentInquire(inquire);\n                                            setOpen(true);\n                                          }}\n                                        >\n                                          <Header content=\"Accepta comanda integral\" />\n                                          <Modal.Content>\n                                            <p>\n                                              Esti sigur ca vrei sa accepti\n                                              comanda integral ?\n                                            </p>\n                                          </Modal.Content>\n                                          <Modal.Actions>\n                                            <Button\n                                              color=\"green\"\n                                              onClick={(e) =>\n                                                onUpdate(e, \"accept\")\n                                              }\n                                            >\n                                              <Icon name=\"remove\" /> Da\n                                            </Button>\n                                            <Button\n                                              color=\"red\"\n                                              onClick={() => {\n                                                setCurrentInquire();\n                                                setOpen(false);\n                                              }}\n                                            >\n                                              <Icon name=\"checkmark\" /> Nu\n                                            </Button>\n                                          </Modal.Actions>\n                                        </Modal>\n\n                                        <Modal\n                                          closeIcon\n                                          SecondOpen={open}\n                                          trigger={\n                                            <Button color=\"red\">Refuza</Button>\n                                          }\n                                          onClose={() => {\n                                            setCurrentInquire();\n                                            setSecondOpen(false);\n                                          }}\n                                          onOpen={(e) => {\n                                            setCurrentInquire(inquire);\n                                            setSecondOpen(true);\n                                          }}\n                                        >\n                                          <Header content=\"Refuza comanda integral\" />\n                                          <Modal.Content>\n                                            <p>\n                                              Esti sigur ca vrei sa refuzi\n                                              comanda integral ?\n                                            </p>\n                                          </Modal.Content>\n                                          <Modal.Actions>\n                                            <Button\n                                              color=\"green\"\n                                              onClick={(e) => onReject(e)}\n                                            >\n                                              <Icon name=\"remove\" /> Da\n                                            </Button>\n                                            <Button\n                                              color=\"red\"\n                                              onClick={() => {\n                                                setCurrentInquire();\n                                                setSecondOpen(false);\n                                              }}\n                                            >\n                                              <Icon name=\"checkmark\" /> Nu\n                                            </Button>\n                                          </Modal.Actions>\n                                        </Modal>\n\n                                        <Modal\n                                          closeIcon\n                                          thirdOpen={open}\n                                          trigger={\n                                            <Button color=\"orange\">\n                                              Partial\n                                            </Button>\n                                          }\n                                          onClose={() => {\n                                            setCurrentInquire();\n                                            setThirdOpen(false);\n                                          }}\n                                          onOpen={() => {\n                                            setCurrentInquire(inquire);\n                                            setThirdOpen(true);\n                                          }}\n                                        >\n                                          <Header content=\"Accepta comanda partial\" />\n                                          <Modal.Content scroll>\n                                            <>\n                                              <h2>Nume Produs : </h2>\n                                              <p>\n                                                Cantitate Ceruta :\n                                                {inquire.quantity_by_restaurant}\n                                              </p>\n                                              <p>Valoare Buc : 10 Lei</p>\n                                              <p>Valoare Totala : 120 Lei</p>\n                                              <Form>\n                                                <Form.Field>\n                                                  <Input\n                                                    label=\"Cantitate disponibila\"\n                                                    placeholder=\"ex : 10\"\n                                                    onBlur={(e) =>\n                                                      setCurrentQty(\n                                                        +e.target.value\n                                                      )\n                                                    }\n                                                  />\n                                                </Form.Field>\n                                              </Form>\n                                              <br />\n                                              <Divider />\n                                              <br />\n                                            </>\n                                          </Modal.Content>\n                                          <Modal.Actions>\n                                            <Button\n                                              color=\"green\"\n                                              onClick={(e) =>\n                                                onUpdate(e, \"partial\")\n                                              }\n                                            >\n                                              <Icon name=\"remove\" /> Da\n                                            </Button>\n                                            <Button\n                                              color=\"red\"\n                                              onClick={() => {\n                                                setCurrentQty();\n                                                setCurrentInquire();\n                                                setThirdOpen(false);\n                                              }}\n                                            >\n                                              <Icon name=\"checkmark\" /> Nu\n                                            </Button>\n                                          </Modal.Actions>\n                                        </Modal>\n                                      </Table.Cell>\n                                    </Table.Row>\n                                  </>\n                                ))}\n                            </>\n                          ))}\n                      </Table.Body>\n                    </Table>\n                  </Table.Cell>\n                </Table.Row>\n\n                <Table.Row></Table.Row>\n              </Table.Body>\n            </Table>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    inquires: state.products.inquiredDetails,\n    user: state.products.user,\n  };\n};\n\nexport default connect(mapStateToProps, {\n  GetInquires,\n  DeclineInquiry,\n  UpdateInquiry,\n})(Inquiries);\n","/home/radu/Documents/work/application-development-2/frontend/src/containers/Supplier/Orders.js",["156","157","158","159","160","161","162","163","164","165","166","167","168","169"],"import React, { useState, useEffect } from \"react\";\nimport TableProducts from \"../../components/TableProducts.js\";\nimport axios from \"axios\";\nimport {\n  Form,\n  Button,\n  Table,\n  Grid,\n  Icon,\n  Modal,\n  Header,\n  Divider,\n  Input,\n} from \"semantic-ui-react\";\n\nimport { connect } from \"react-redux\";\nimport { toastr } from \"react-redux-toastr\";\n\nimport { GetSupplierOrder, MarkAsDelivery } from \"../../redux/actions/products\";\nimport { URL, CREDENTIALS } from \"../../requests\";\n\nconst Orders = ({ GetSupplierOrder, MarkAsDelivery, orders, user }) => {\n  // const [formData, setFormData] = useState({\n  //   product_item_id: 0, //here is product id is given by default\n  // });\n\n  const userType = user;\n  useEffect(() => {\n    GetSupplierOrder();\n  }, []);\n\n  const acceptOrder = async (e, order_id) => {\n    e.preventDefault();\n    await MarkAsDelivery({ product_id: order_id });\n    GetSupplierOrder();\n    toastr.success(\"Order Delivered\", \"Order Mark As Delivery successfully\");\n    window.location.href = \"/orders\";\n  };\n\n  return (\n    <>\n      <Grid columns={1} textAlign=\"center\" divided>\n        <Grid.Row width=\"14\">\n          <Grid.Column width=\"14\">\n            <Table celled>\n              {userType && userType.is_supplier && (\n                <Table.Header>\n                  <Table.Row>\n                    <Table.HeaderCell>Nume restaurant</Table.HeaderCell>\n                    <Table.HeaderCell>Data Comanda</Table.HeaderCell>\n                    <Table.HeaderCell>Valoare Comanda</Table.HeaderCell>\n                    <Table.HeaderCell>Timp ramas</Table.HeaderCell>\n                    <Table.HeaderCell>Valoare T.V.A</Table.HeaderCell>\n                    <Table.HeaderCell>Accepta Comanda</Table.HeaderCell>\n                    <Table.HeaderCell>Refuza Comanda</Table.HeaderCell>\n                    <Table.HeaderCell>Vezi Comanda</Table.HeaderCell>\n                  </Table.Row>\n                </Table.Header>\n              )}\n              {userType && !userType.is_supplier && (\n                <Table.Body>\n                  {orders &&\n                    orders.map((order) => {\n                      if (!order.is_delivered) {\n                        return (\n                          <Table.Row>\n                            <Table.Cell warning>\n                              {order.product_title}\n                            </Table.Cell>\n                            <Table.Cell warning></Table.Cell>\n                            {/* TODO:Order Value  */}\n                            <Table.Cell warning></Table.Cell>\n                            <Table.Cell warning></Table.Cell>\n                            <Table.Cell warning></Table.Cell>\n                            <Table.Cell warning textAlign=\"center\">\n                              <Button\n                                color=\"green\"\n                                onClick={(e) =>\n                                  acceptOrder(e, order.product_item_id)\n                                }\n                              >\n                                Accepta\n                              </Button>\n                            </Table.Cell>\n                            <Table.Cell warning textAlign=\"center\">\n                              <Button color=\"red\">Refuza</Button>\n                            </Table.Cell>\n                            <Table.Cell warning textAlign=\"center\">\n                              <Button>Vezi Detalii</Button>\n                            </Table.Cell>\n                          </Table.Row>\n                        );\n                      }\n                    })}\n\n                  <Table.Row>\n                    <Table.Cell positive colspan=\"8\" textAlign=\"center\">\n                      <Table celled>\n                        <Table.Header>\n                          <Table.Row>\n                            <Table.HeaderCell>Nume Produs</Table.HeaderCell>\n                            <Table.HeaderCell>Cantitate</Table.HeaderCell>\n                            <Table.HeaderCell>Pret Buc</Table.HeaderCell>\n                            <Table.HeaderCell>Valoare TVA</Table.HeaderCell>\n                            <Table.HeaderCell>Valoare Comanda</Table.HeaderCell>\n                          </Table.Row>\n                        </Table.Header>\n\n                        <Table.Body>\n                          {orders &&\n                            orders.map((order) => {\n                              if (order.is_delivered) {\n                                return (\n                                  <Table.Row>\n                                    <Table.Cell positive>\n                                      {order.product_title}\n                                    </Table.Cell>\n                                    <Table.Cell positive>\n                                      {/* TODO:Amount */}\n                                    </Table.Cell>\n                                    <Table.Cell positive>\n                                      {order.product_price}\n                                    </Table.Cell>\n                                    <Table.Cell positive></Table.Cell>\n                                    {/* TODO:Order Value */}\n                                    <Table.Cell positive></Table.Cell>\n                                  </Table.Row>\n                                );\n                              }\n                            })}\n                        </Table.Body>\n                      </Table>\n                    </Table.Cell>\n                  </Table.Row>\n                  <Table.Row></Table.Row>\n                </Table.Body>\n              )}\n            </Table>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    carts: state.products.cartsDetails,\n    orders: state.products.supplierOrdersDetails,\n    user: state.products.user,\n  };\n};\nexport default connect(mapStateToProps, {\n  GetSupplierOrder,\n  MarkAsDelivery,\n})(Orders);\n","/home/radu/Documents/work/application-development-2/frontend/src/containers/Supplier/addproductmodal.js",[],"/home/radu/Documents/work/application-development-2/frontend/src/components/TableProducts.js",["170","171","172"],"import React, { Component, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Button, Icon } from 'semantic-ui-react'\n\n// IMPORT TABLE COMPONENTS\n\n\n\nclass TableProducts extends Component {\n\n\n  render() {\n    <table className=\"table-container\">\n      <tr>\n        <td className=\"table-header-container\" colspan=\"6\">\n          <div className=\"table-header\">\n            <span className=\"verde\">Lista Produse Pending</span>\n            <div className=\"table-search-field-container\">\n              <span className=\"table-search-field-name\">Cauta :</span>\n              <input className=\"table-search-field-input\" type=\"search\" placeholder=\"Introdu criteriile\"></input>\n              <i class=\"table-search-field-icon\"><Icon name='search' /></i>\n            </div>\n          </div>\n        </td>\n      </tr>\n      <tr>\n        <th>\n          #\n        </th>\n        <th>\n          Client\n        </th>\n        <th>\n          Data Comanda\n        </th>\n        <th>\n          Status\n        </th>\n        <th>\n          Valoare Comanda\n        </th>\n        <th>\n          Actiune\n        </th>\n      </tr>\n      <tr>\n        <td>\n          1\n        </td>\n        <td>\n          Edesia\n        </td>\n        <td>\n          08.12.2020\n        </td>\n        <td>\n          Pending\n        </td>\n        <td>\n          120 Lei\n        </td>\n        <td>\n          Click Here\n        </td>\n      </tr>\n    </table>\n\n    return (\n    <>\n      This is the products\n    </>\n    );\n  }\n}\n\nexport default TableProducts;\n","/home/radu/Documents/work/application-development-2/frontend/src/requests.js",["173"],"export const URL = \"http://localhost:8000\";\nexport const BACKEND_URL = `${URL}/api/v1/`;\n\nexport default {\n  //   Auth\n  GET_TOKEN: \"token/\",\n  GET_CHECK_USER_TYPE: \"check-user-type/\",\n  //   Product\n  SUPPLIER_PRODUCT_LIST: \"product-list/\",\n  SUPPLIER_ADD_PRODUCT_IN_CART: \"add-product-in-cart/\",\n  //   Cart\n  GET_RESTAURANT_ADD_CART: \"product-list-in-cart/\",\n  UPDATE_RESTAURANT_ADD_CART: \"update-product-in-cart/\",\n  DELETE_RESTAURANT_ADD_CART: \"remove-product-in-cart/\",\n  //   Inquires\n  GET_SUPPLIER_INQUIRES: \"enquiry-list/\",\n  ADD_RESTAURANT_INQUIRES: \"add-items-in-enquiry/\",\n  UPDATE_SUPPLIER_INQUIRES: \"update-enquiry-request/\",\n  DECLINE_SUPPLIER_INQUIRES: \"decline-enquiry-request/\",\n  //   Orders\n  GET_RESTAURANT_ORDERS: \"restaurant-ordered-product-list/\",\n  PLACE_ORDER_RESTAURANT_ORDER: \"place-order/\",\n  MARK_AS_DELIVERY_SUPPLIER_ORDER: \"mark-orders-as-delivered/\",\n  GET_SUPPLIER_ORDERS: \"supplier-pending-product-list/\",\n};\n\nexport const TOKEN =\n  \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjEyNjQwNzQzLCJqdGkiOiIyMzNjYzExMTQyOTY0MWZmYmNkMGExMWQ4YWU4ODI4MSIsInVzZXJfaWQiOjR9.IHx5OirlN7MMQiXlK_I6u71xrIvD1rOQEwfau_TX_8\";\n\nexport const CREDENTIALS = {\n  username: \"rest1\",\n  password: \"Shreeji@1\",\n};\n","/home/radu/Documents/work/application-development-2/frontend/src/components/Table/iTableModalsAccept.js",["174"],"import React from 'react'\nimport { Button, Header, Icon, Modal } from 'semantic-ui-react'\n\nfunction ITableModalsAccept() {\n  const [open, setOpen] = React.useState(false)\n\n  return (\n    <>\n    <Modal\n      closeIcon\n      open={open}\n      trigger={<Button color='green'>Accepta Comanda</Button>}\n      onClose={() => setOpen(false)}\n      onOpen={() => setOpen(true)}\n    >\n      <Header icon='check circle' content='Accepta comanda' />\n      <Modal.Content>\n        <p>\n          Esti sigur ca vrei sa accepti comanda pentru Restaurant 1 integral ?\n        </p>\n      </Modal.Content>\n      <Modal.Actions>\n        <Button color='red' onClick={() => setOpen(false)}>\n           Nu\n        </Button>\n        <Button color='green' onClick={() => setOpen(false)}>\n           Da\n        </Button>\n      </Modal.Actions>\n    </Modal>\n    {this.props.children}\n    </>\n  )\n}\n\nexport default ITableModalsAccept\n","/home/radu/Documents/work/application-development-2/frontend/src/components/Table/iTableModalsDecline.js",["175"],"import React from 'react'\nimport { Button, Header, Icon, Modal } from 'semantic-ui-react'\n\nfunction ITableModalsDecline() {\n  const [open, setOpen] = React.useState(false)\n\n  return (\n    <Modal\n      closeIcon\n      open={open}\n      trigger={<Button color='red'>Respinge Comanda</Button>}\n      onClose={() => setOpen(false)}\n      onOpen={() => setOpen(true)}\n    >\n      <Header icon='delete' content='Respinge comanda' />\n      <Modal.Content>\n        <p>\n          Esti sigur ca vrei sa respingi comanda pentru Restaurant 1 integral ?\n        </p>\n      </Modal.Content>\n      <Modal.Actions>\n        <Button color='red' onClick={() => setOpen(false)}>\n           Nu\n        </Button>\n        <Button color='green' onClick={() => setOpen(false)}>\n           Da\n        </Button>\n      </Modal.Actions>\n    </Modal>\n  )\n}\n\nexport default ITableModalsDecline\n","/home/radu/Documents/work/application-development-2/frontend/src/components/Table/iTableModalsPartial.js",["176"],"import React from 'react'\nimport { Button, Modal, Form, Icon, Label, Header } from 'semantic-ui-react'\n\nfunction ITableModalsAccept() {\n  const [open, setOpen] = React.useState(false)\n\n  return (\n    <Modal\n      closeIcon\n      open={open}\n      trigger={<Button color='yellow'>Onoreaza partial comanda</Button>}\n      onClose={() => setOpen(false)}\n      onOpen={() => setOpen(true)}\n    >\n      <Header icon='edit' content='Accepta comanda' />\n      <Modal.Content>\n        <Form>\n          <Form.Group>\n            <Label fluid>\n              Paste\n            </Label>\n            <Form.Input\n              fluid\n              id='form-subcomponent-shorthand-input-last-name'\n              label='Cantitate Disponibila'\n              placeholder='Cantitate..'\n            />\n            <Form.Input\n              fluid\n              id='form-subcomponent-shorthand-input-last-name'\n              label='Pret pe unitate'\n              placeholder='Pret...'\n            />\n          </Form.Group>\n        </Form>\n      </Modal.Content>\n      <Modal.Actions>\n        <Button color='red' onClick={() => setOpen(false)}>\n           Nu\n        </Button>\n        <Button color='green' onClick={() => setOpen(false)}>\n           Da\n        </Button>\n      </Modal.Actions>\n    </Modal>\n  )\n}\n\nexport default ITableModalsAccept\n","/home/radu/Documents/work/application-development-2/frontend/src/redux/reducers/rootReducer.js",[],"/home/radu/Documents/work/application-development-2/frontend/src/redux/actions/products.js",["177","178"],"import axios from \"axios\";\nimport { toastr } from \"react-redux-toastr\";\nimport requests, { BACKEND_URL, TOKEN } from \"../../requests\";\nimport { useHistory } from \"react-router-dom\";\n\n/** Product Start */\n// Product Fetch\nexport const ProductFetch = () => {\n  return async (dispatch, getState) => {\n    // Loading\n    dispatch({\n      type: \"PRODUCT_LOADING\",\n      payload: true,\n    });\n    //   Get Token from state\n\n    try {\n      const productData = await axios.get(\n        `${BACKEND_URL}${requests.SUPPLIER_PRODUCT_LIST}`,\n        tokenConfig(getState)\n      );\n      console.log({ productData });\n      await checkUserType(dispatch, getState);\n\n      dispatch({\n        type: \"STOP_LOADING\",\n      });\n      dispatch({ type: \"GET_PRODUCTS\", payload: productData.data.data });\n    } catch (error) {\n      console.log({ error });\n\n      errorHandle(error, dispatch);\n    }\n  };\n};\n\n/** Product End */\n\n/** Carts Start  */\n// Fetch Cart\nexport const GetAddToCart = () => {\n  return async (dispatch, getState) => {\n    // Loading\n    dispatch({\n      type: \"PRODUCT_LOADING\",\n      payload: true,\n    });\n    //   Get Token from state\n\n    try {\n      const CartProduct = await axios.get(\n        `${BACKEND_URL}${requests.GET_RESTAURANT_ADD_CART}`,\n        tokenConfig(getState)\n      );\n      console.log({ CartProduct });\n\n      dispatch({ type: \"ADD_TO_CART\", payload: CartProduct.data.data });\n      await checkUserType(dispatch, getState);\n      dispatch({\n        type: \"STOP_LOADING\",\n      });\n    } catch (error) {\n      console.log({ error });\n      errorHandle(error, dispatch);\n    }\n  };\n};\n\n// Add To Cart\nexport const AddToCart = (data) => {\n  return async (dispatch, getState) => {\n    // Loading\n    dispatch({\n      type: \"PRODUCT_LOADING\",\n      payload: true,\n    });\n    //   Get Token from state\n\n    try {\n      const addToCartProduct = await axios.post(\n        `${BACKEND_URL}${requests.SUPPLIER_ADD_PRODUCT_IN_CART}`,\n        {\n          product_id: data.product_id,\n        },\n        tokenConfig(getState)\n      );\n      console.log({ addToCartProduct });\n      // dispatch({ type: \"ADD_TO_CART\", payload: addToCartProduct.data });\n      await checkUserType(dispatch, getState);\n\n      dispatch({\n        type: \"STOP_LOADING\",\n      });\n    } catch (error) {\n      console.log({ error });\n      errorHandle(error, dispatch);\n    }\n  };\n};\n\n// Update Cart\nexport const UpdateCart = (data) => {\n  return async (dispatch, getState) => {\n    // Loading\n    dispatch({\n      type: \"PRODUCT_LOADING\",\n      payload: true,\n    });\n    //   Get Token from state\n\n    try {\n      const updateCartProduct = await axios.post(\n        `${BACKEND_URL}${requests.UPDATE_RESTAURANT_ADD_CART}`,\n        {\n          product_item_id: data.product_id,\n          quantity: data.quantity,\n          price: data.price,\n        },\n        tokenConfig(getState)\n      );\n      GetAddToCart();\n      console.log({ updateCartProduct });\n      // dispatch({ type: \"ADD_TO_CART\", payload: addToCartProduct.data });\n      await checkUserType(dispatch, getState);\n\n      dispatch({\n        type: \"STOP_LOADING\",\n      });\n    } catch (error) {\n      console.log({ error });\n      errorHandle(error, dispatch);\n    }\n  };\n};\n\n// Delete Cart\nexport const DeleteCart = (data) => {\n  return async (dispatch, getState) => {\n    // Loading\n    dispatch({\n      type: \"PRODUCT_LOADING\",\n      payload: true,\n    });\n    //   Get Token from state\n\n    try {\n      const deleteCartProduct = await axios.post(\n        `${BACKEND_URL}${requests.DELETE_RESTAURANT_ADD_CART}`,\n        {\n          product_item_id: data.product_id,\n        },\n        tokenConfig(getState)\n      );\n\n      dispatch({\n        type: \"STOP_LOADING\",\n      });\n      GetAddToCart();\n      await checkUserType(dispatch, getState);\n\n      console.log({ deleteCartProduct });\n      window.location.href = \"/cart\";\n      // dispatch({ type: \"ADD_TO_CART\", payload: addToCartProduct.data });\n    } catch (error) {\n      console.log({ error });\n      errorHandle(error, dispatch);\n    }\n  };\n};\n\n/** Carts End */\n\n/** Inquiries Start */\n// Fetch Inquiries\nexport const GetInquires = () => {\n  return async (dispatch, getState) => {\n    // Loading\n    dispatch({\n      type: \"PRODUCT_LOADING\",\n      payload: true,\n    });\n    //   Get Token from state\n\n    try {\n      const Inquires = await axios.get(\n        `${BACKEND_URL}${requests.GET_SUPPLIER_INQUIRES}`,\n        tokenConfig(getState)\n      );\n      console.log({ Inquires });\n      dispatch({ type: \"GET_INQUIRES\", payload: Inquires.data.data });\n      await checkUserType(dispatch, getState);\n    } catch (error) {\n      console.log({ error });\n      errorHandle(error, dispatch);\n    }\n  };\n};\n\n// Add Inquiry\nexport const AddInquiry = (data) => {\n  return async (dispatch, getState) => {\n    // Loading\n    dispatch({\n      type: \"PRODUCT_LOADING\",\n      payload: true,\n    });\n    //   Get Token from state\n\n    try {\n      const addInquire = await axios.post(\n        `${BACKEND_URL}${requests.ADD_RESTAURANT_INQUIRES}`,\n        {\n          product_items: data.product_id,\n        },\n        tokenConfig(getState)\n      );\n      GetInquires();\n      console.log({ addInquire });\n      // dispatch({ type: \"ADD_TO_CART\", payload: addToCartProduct.data });\n      await checkUserType(dispatch, getState);\n\n      dispatch({\n        type: \"STOP_LOADING\",\n      });\n    } catch (error) {\n      console.log({ error });\n      errorHandle(error, dispatch);\n    }\n  };\n};\n\n//  Update Inquiry\nexport const UpdateInquiry = (data) => {\n  return async (dispatch, getState) => {\n    // Loading\n    dispatch({\n      type: \"PRODUCT_LOADING\",\n      payload: true,\n    });\n    //   Get Token from state\n\n    try {\n      const updateInquiry = await axios.post(\n        `${BACKEND_URL}${requests.UPDATE_SUPPLIER_INQUIRES}`,\n        {\n          product_item_id: data.product_id,\n          enquiry_id: data.inquiry_id,\n          price: data.price,\n          quantity: data.quantity,\n        },\n        tokenConfig(getState)\n      );\n      GetInquires();\n      console.log({ updateInquiry });\n      await checkUserType(dispatch, getState);\n\n      // dispatch({ type: \"ADD_TO_CART\", payload: addToCartProduct.data });\n      dispatch({\n        type: \"STOP_LOADING\",\n      });\n      window.location.href = \"/inquiries\";\n    } catch (error) {\n      console.log({ error });\n      errorHandle(error, dispatch);\n    }\n  };\n};\n\n// Decline Inquiry\nexport const DeclineInquiry = (data) => {\n  return async (dispatch, getState) => {\n    // Loading\n    dispatch({\n      type: \"PRODUCT_LOADING\",\n      payload: true,\n    });\n    //   Get Token from state\n\n    try {\n      const declineInquiry = await axios.post(\n        `${BACKEND_URL}${requests.DELETE_RESTAURANT_ADD_CART}`,\n        {\n          product_item_id: data.product_id,\n          enquiry_id: data.inquiry_id,\n        },\n        tokenConfig(getState)\n      );\n      GetInquires();\n      console.log({ declineInquiry });\n      // dispatch({ type: \"ADD_TO_CART\", payload: addToCartProduct.data });\n      await checkUserType(dispatch, getState);\n\n      dispatch({\n        type: \"STOP_LOADING\",\n      });\n      window.location.href = \"/inquiries\";\n    } catch (error) {\n      console.log({ error });\n      errorHandle(error, dispatch);\n    }\n  };\n};\n/** Inquiries End */\n\n/** Orders Start */\n// Fetch Supplier Order\nexport const GetSupplierOrder = () => {\n  return async (dispatch, getState) => {\n    // Loading\n    dispatch({\n      type: \"PRODUCT_LOADING\",\n      payload: true,\n    });\n    //   Get Token from state\n\n    try {\n      const supplierOrders = await axios.get(\n        `${BACKEND_URL}${requests.GET_SUPPLIER_ORDERS}`,\n        tokenConfig(getState)\n      );\n      console.log({ supplierOrders });\n\n      dispatch({\n        type: \"GET_SUPPLIER_ORDERS\",\n        payload: supplierOrders.data.data,\n      });\n      await checkUserType(dispatch, getState);\n\n      dispatch({\n        type: \"STOP_LOADING\",\n      });\n    } catch (error) {\n      console.log({ error });\n      errorHandle(error, dispatch);\n    }\n  };\n};\n\n// Fetch Restaurant Order\nexport const GetRestaurantOrder = () => {\n  return async (dispatch, getState) => {\n    // Loading\n    dispatch({\n      type: \"PRODUCT_LOADING\",\n      payload: true,\n    });\n    //   Get Token from state\n\n    try {\n      const restaurantOrders = await axios.get(\n        `${BACKEND_URL}${requests.GET_RESTAURANT_ORDERS}`,\n        tokenConfig(getState)\n      );\n      console.log({ restaurantOrders });\n      dispatch({\n        type: \"GET_RESTAURANT_ORDERS\",\n        payload: restaurantOrders.data.data,\n      });\n      await checkUserType(dispatch, getState);\n\n      dispatch({\n        type: \"STOP_LOADING\",\n      });\n    } catch (error) {\n      console.log({ error });\n      errorHandle(error, dispatch);\n    }\n  };\n};\n\n// Mark as Delivery\nexport const MarkAsDelivery = (data) => {\n  return async (dispatch, getState) => {\n    // Loading\n    dispatch({\n      type: \"PRODUCT_LOADING\",\n      payload: true,\n    });\n    //   Get Token from state\n\n    try {\n      const markAsADelivery = await axios.post(\n        `${BACKEND_URL}${requests.MARK_AS_DELIVERY_SUPPLIER_ORDER}`,\n        {\n          //TODO: This is in array\n          product_items: [data.product_id],\n        },\n        tokenConfig(getState)\n      );\n      GetRestaurantOrder();\n      GetSupplierOrder();\n      console.log({ markAsADelivery });\n      // dispatch({ type: \"ADD_TO_CART\", payload: addToCartProduct.data });\n      await checkUserType(dispatch, getState);\n\n      dispatch({\n        type: \"STOP_LOADING\",\n      });\n    } catch (error) {\n      console.log({ error });\n      errorHandle(error, dispatch);\n    }\n  };\n};\n\n// Place Order\nexport const PlaceOrder = (data) => {\n  return async (dispatch, getState) => {\n    // Loading\n    dispatch({\n      type: \"PRODUCT_LOADING\",\n      payload: true,\n    });\n    //   Get Token from state\n\n    try {\n      const placeOrder = await axios.post(\n        `${BACKEND_URL}${requests.PLACE_ORDER_RESTAURANT_ORDER}`,\n        {\n          //TODO: This is in array\n          product_items: data.product_id,\n        },\n        tokenConfig(getState)\n      );\n      console.log({ placeOrder });\n      // dispatch({ type: \"ADD_TO_CART\", payload: addToCartProduct.data });\n      await checkUserType(dispatch, getState);\n\n      dispatch({\n        type: \"STOP_LOADING\",\n      });\n    } catch (error) {\n      console.log({ error });\n      errorHandle(error, dispatch);\n    }\n  };\n};\n\n/** Orders End */\n\n/** Auth Start*/\n\n// Get Access Token\nexport const SetToken = (data) => {\n  return async (dispatch, getState) => {\n    // Loading\n    console.log({ data });\n    dispatch({\n      type: \"PRODUCT_LOADING\",\n      payload: true,\n    });\n    //   Get Token from state\n\n    try {\n      const token = await axios.post(`${BACKEND_URL}${requests.GET_TOKEN}`, {\n        username: data.username,\n        password: data.password,\n      });\n      console.log({ token });\n      localStorage.setItem(\"token\", token.data.access);\n\n      await checkUserType(dispatch, getState);\n      dispatch({\n        type: \"STOP_LOADING\",\n      });\n      toastr.success(\"Login Successfully\", \"Login Successfully\");\n      window.location.href = \"/products\";\n    } catch (error) {\n      console.log({ error });\n      errorHandle(error, dispatch);\n    }\n  };\n};\n\nexport const checkUserType = async (dispatch, getState) => {\n  try {\n    const userType = await axios.get(\n      `${BACKEND_URL}${requests.GET_CHECK_USER_TYPE}`,\n      tokenConfig(getState)\n    );\n    console.log({ userType });\n    dispatch({ type: \"USER_TYPE\", payload: userType.data.data });\n  } catch (error) {\n    console.log({ error });\n    errorHandle(error, dispatch);\n  }\n};\n\nexport const Logout = () => {\n  return async (dispatch, getState) => {\n    localStorage.removeItem(\"token\");\n    dispatch({\n      type: \"LOGOUT\",\n    });\n    window.location.href = \"/login\";\n  };\n};\n\n/** Auth End*/\n\n/** Common Actions */\n// Error Handle\nexport const errorHandle = (error, dispatch) => {\n  if (\n    error &&\n    error.response &&\n    error.response.data &&\n    error.response.data.code &&\n    error.response.data.code === \"token_not_valid\"\n  ) {\n    localStorage.removeItem(\"token\");\n    toastr.error(\n      (error.response.data.messages &&\n        error.response.data.messages[0] &&\n        error.response.data.messages[0].message) ||\n        error.response.data.detail\n    );\n    dispatch({\n      type: \"AUTH_ERROR\",\n      payload: { error: error.response.data },\n    });\n    window.location.href = \"/login\";\n  } else if (\n    error &&\n    error.response &&\n    error.response.data &&\n    (error.response.data.messages || error.response.data.detail)\n  )\n    toastr.error(\n      (error.response.data.messages &&\n        error.response.data.messages[0] &&\n        error.response.data.messages[0].message) ||\n        error.response.data.detail\n    );\n  dispatch({\n    type: \"PRODUCT_LOADING\",\n    payload: false,\n  });\n  dispatch({\n    type: \"ERROR\",\n    payload: { error: error.response.data },\n  });\n};\n\n// Handle Token\nexport const tokenConfig = (getState) => {\n  // const token = TOKEN;\n  // const token = getState().products.token || TOKEN;\n  const token = localStorage.getItem(\"token\");\n  console.log({ tokenConfig: token });\n\n  // Headers\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  };\n  // if Token , add to headers config\n  if (token) {\n    config.headers[\"Authorization\"] = `Bearer ${token}`;\n  } else {\n    window.location.href = \"/login\";\n  }\n  return config;\n};\n","/home/radu/Documents/work/application-development-2/frontend/src/redux/reducers/products.js",["179"],"const initialState = {\n  token: localStorage.getItem(\"token\"),\n  isAuthenticated: null,\n  isLoading: false,\n  redirect: false,\n  productsDetails: [],\n  cartsDetails: {},\n  inquiredDetails: {},\n  supplierOrdersDetails: [],\n  restaurantOrdersDetails: [],\n  error: {},\n  user: {},\n};\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    case \"USER_TYPE\":\n      return { ...state, user: action.payload };\n    case \"PRODUCT_LOADING\":\n      return { ...state, isLoading: action.payload || true };\n    case \"STOP_LOADING\":\n      return { ...state, isLoading: false };\n    case \"GET_PRODUCTS\":\n      return { ...state, productsDetails: action.payload };\n    case \"ADD_TO_CART\":\n      return { ...state, cartsDetails: action.payload };\n    case \"GET_INQUIRES\":\n      return { ...state, inquiredDetails: action.payload };\n    case \"GET_SUPPLIER_ORDERS\":\n      return { ...state, supplierOrdersDetails: action.payload };\n    case \"GET_RESTAURANT_ORDERS\":\n      return { ...state, restaurantOrdersDetails: action.payload };\n    case \"ERROR\":\n      return {\n        ...state,\n        error: action.payload,\n      };\n    case \"LOGOUT\":\n      return {\n        ...state,\n        token: null,\n        user: null,\n        isAuthenticated: false,\n        isLoading: false,\n        error: null,\n      };\n    case \"AUTH_ERROR\":\n      return {\n        ...state,\n        token: null,\n        user: null,\n        isAuthenticated: false,\n        isLoading: false,\n        error: action.payload,\n      };\n\n    default:\n      return state;\n  }\n}\n",{"ruleId":"180","replacedBy":"181"},{"ruleId":"182","replacedBy":"183"},{"ruleId":"184","severity":1,"message":"185","line":2,"column":8,"nodeType":"186","messageId":"187","endLine":2,"endColumn":15},{"ruleId":"184","severity":1,"message":"188","line":12,"column":8,"nodeType":"186","messageId":"187","endLine":12,"endColumn":20},{"ruleId":"184","severity":1,"message":"189","line":1,"column":28,"nodeType":"186","messageId":"187","endLine":1,"endColumn":36},{"ruleId":"184","severity":1,"message":"190","line":2,"column":31,"nodeType":"186","messageId":"187","endLine":2,"endColumn":39},{"ruleId":"184","severity":1,"message":"191","line":2,"column":62,"nodeType":"186","messageId":"187","endLine":2,"endColumn":68},{"ruleId":"192","severity":1,"message":"193","line":12,"column":9,"nodeType":"194","messageId":"195","endLine":14,"endColumn":10},{"ruleId":"184","severity":1,"message":"196","line":2,"column":8,"nodeType":"186","messageId":"187","endLine":2,"endColumn":19},{"ruleId":"197","severity":1,"message":"198","line":13,"column":17,"nodeType":"199","endLine":13,"endColumn":39},{"ruleId":"197","severity":1,"message":"198","line":22,"column":17,"nodeType":"199","endLine":22,"endColumn":20},{"ruleId":"197","severity":1,"message":"198","line":35,"column":17,"nodeType":"199","endLine":35,"endColumn":39},{"ruleId":"197","severity":1,"message":"198","line":44,"column":17,"nodeType":"199","endLine":44,"endColumn":20},{"ruleId":"197","severity":1,"message":"198","line":57,"column":17,"nodeType":"199","endLine":57,"endColumn":39},{"ruleId":"197","severity":1,"message":"198","line":66,"column":17,"nodeType":"199","endLine":66,"endColumn":20},{"ruleId":"184","severity":1,"message":"200","line":3,"column":8,"nodeType":"186","messageId":"187","endLine":3,"endColumn":13},{"ruleId":"184","severity":1,"message":"201","line":7,"column":8,"nodeType":"186","messageId":"187","endLine":7,"endColumn":23},{"ruleId":"184","severity":1,"message":"202","line":14,"column":8,"nodeType":"186","messageId":"187","endLine":14,"endColumn":21},{"ruleId":"184","severity":1,"message":"203","line":15,"column":15,"nodeType":"186","messageId":"187","endLine":15,"endColumn":26},{"ruleId":"184","severity":1,"message":"204","line":29,"column":11,"nodeType":"186","messageId":"187","endLine":29,"endColumn":21},{"ruleId":"205","severity":1,"message":"206","line":33,"column":6,"nodeType":"207","endLine":33,"endColumn":8,"suggestions":"208"},{"ruleId":"184","severity":1,"message":"209","line":35,"column":9,"nodeType":"186","messageId":"187","endLine":35,"endColumn":17},{"ruleId":"184","severity":1,"message":"210","line":1,"column":17,"nodeType":"186","messageId":"187","endLine":1,"endColumn":26},{"ruleId":"184","severity":1,"message":"211","line":3,"column":16,"nodeType":"186","messageId":"187","endLine":3,"endColumn":24},{"ruleId":"184","severity":1,"message":"212","line":4,"column":10,"nodeType":"186","messageId":"187","endLine":4,"endColumn":16},{"ruleId":"184","severity":1,"message":"189","line":1,"column":17,"nodeType":"186","messageId":"187","endLine":1,"endColumn":25},{"ruleId":"184","severity":1,"message":"200","line":2,"column":8,"nodeType":"186","messageId":"187","endLine":2,"endColumn":13},{"ruleId":"184","severity":1,"message":"213","line":3,"column":30,"nodeType":"186","messageId":"187","endLine":3,"endColumn":37},{"ruleId":"184","severity":1,"message":"203","line":14,"column":15,"nodeType":"186","messageId":"187","endLine":14,"endColumn":26},{"ruleId":"205","severity":1,"message":"214","line":26,"column":6,"nodeType":"207","endLine":26,"endColumn":8,"suggestions":"215"},{"ruleId":"184","severity":1,"message":"216","line":4,"column":3,"nodeType":"186","messageId":"187","endLine":4,"endColumn":7},{"ruleId":"217","severity":1,"message":"218","line":45,"column":47,"nodeType":"219","messageId":"220","endLine":45,"endColumn":49},{"ruleId":"205","severity":1,"message":"221","line":53,"column":6,"nodeType":"207","endLine":53,"endColumn":8,"suggestions":"222"},{"ruleId":"184","severity":1,"message":"223","line":121,"column":25,"nodeType":"186","messageId":"187","endLine":121,"endColumn":30},{"ruleId":"217","severity":1,"message":"224","line":226,"column":52,"nodeType":"219","messageId":"225","endLine":226,"endColumn":54},{"ruleId":"184","severity":1,"message":"189","line":1,"column":17,"nodeType":"186","messageId":"187","endLine":1,"endColumn":25},{"ruleId":"184","severity":1,"message":"202","line":2,"column":8,"nodeType":"186","messageId":"187","endLine":2,"endColumn":21},{"ruleId":"184","severity":1,"message":"226","line":15,"column":8,"nodeType":"186","messageId":"187","endLine":15,"endColumn":26},{"ruleId":"184","severity":1,"message":"227","line":16,"column":8,"nodeType":"186","messageId":"187","endLine":16,"endColumn":27},{"ruleId":"184","severity":1,"message":"228","line":17,"column":8,"nodeType":"186","messageId":"187","endLine":17,"endColumn":27},{"ruleId":"184","severity":1,"message":"229","line":37,"column":10,"nodeType":"186","messageId":"187","endLine":37,"endColumn":20},{"ruleId":"184","severity":1,"message":"230","line":38,"column":10,"nodeType":"186","messageId":"187","endLine":38,"endColumn":19},{"ruleId":"205","severity":1,"message":"231","line":44,"column":6,"nodeType":"207","endLine":44,"endColumn":8,"suggestions":"232"},{"ruleId":"184","severity":1,"message":"189","line":1,"column":17,"nodeType":"186","messageId":"187","endLine":1,"endColumn":25},{"ruleId":"184","severity":1,"message":"202","line":2,"column":8,"nodeType":"186","messageId":"187","endLine":2,"endColumn":21},{"ruleId":"184","severity":1,"message":"200","line":3,"column":8,"nodeType":"186","messageId":"187","endLine":3,"endColumn":13},{"ruleId":"184","severity":1,"message":"233","line":5,"column":3,"nodeType":"186","messageId":"187","endLine":5,"endColumn":7},{"ruleId":"184","severity":1,"message":"234","line":9,"column":3,"nodeType":"186","messageId":"187","endLine":9,"endColumn":7},{"ruleId":"184","severity":1,"message":"235","line":10,"column":3,"nodeType":"186","messageId":"187","endLine":10,"endColumn":8},{"ruleId":"184","severity":1,"message":"191","line":11,"column":3,"nodeType":"186","messageId":"187","endLine":11,"endColumn":9},{"ruleId":"184","severity":1,"message":"213","line":12,"column":3,"nodeType":"186","messageId":"187","endLine":12,"endColumn":10},{"ruleId":"184","severity":1,"message":"236","line":13,"column":3,"nodeType":"186","messageId":"187","endLine":13,"endColumn":8},{"ruleId":"184","severity":1,"message":"237","line":20,"column":10,"nodeType":"186","messageId":"187","endLine":20,"endColumn":13},{"ruleId":"184","severity":1,"message":"203","line":20,"column":15,"nodeType":"186","messageId":"187","endLine":20,"endColumn":26},{"ruleId":"205","severity":1,"message":"238","line":30,"column":6,"nodeType":"207","endLine":30,"endColumn":8,"suggestions":"239"},{"ruleId":"217","severity":1,"message":"224","line":63,"column":40,"nodeType":"219","messageId":"225","endLine":63,"endColumn":42},{"ruleId":"217","severity":1,"message":"224","line":111,"column":48,"nodeType":"219","messageId":"225","endLine":111,"endColumn":50},{"ruleId":"184","severity":1,"message":"189","line":1,"column":28,"nodeType":"186","messageId":"187","endLine":1,"endColumn":36},{"ruleId":"184","severity":1,"message":"240","line":2,"column":10,"nodeType":"186","messageId":"187","endLine":2,"endColumn":14},{"ruleId":"184","severity":1,"message":"241","line":3,"column":10,"nodeType":"186","messageId":"187","endLine":3,"endColumn":16},{"ruleId":"242","severity":1,"message":"243","line":4,"column":1,"nodeType":"244","endLine":25,"endColumn":3},{"ruleId":"184","severity":1,"message":"234","line":2,"column":26,"nodeType":"186","messageId":"187","endLine":2,"endColumn":30},{"ruleId":"184","severity":1,"message":"234","line":2,"column":26,"nodeType":"186","messageId":"187","endLine":2,"endColumn":30},{"ruleId":"184","severity":1,"message":"234","line":2,"column":31,"nodeType":"186","messageId":"187","endLine":2,"endColumn":35},{"ruleId":"184","severity":1,"message":"245","line":3,"column":33,"nodeType":"186","messageId":"187","endLine":3,"endColumn":38},{"ruleId":"184","severity":1,"message":"246","line":4,"column":10,"nodeType":"186","messageId":"187","endLine":4,"endColumn":20},{"ruleId":"242","severity":1,"message":"247","line":15,"column":1,"nodeType":"244","endLine":60,"endColumn":2},"no-native-reassign",["248"],"no-negated-in-lhs",["249"],"no-unused-vars","'MainCss' is defined but never used.","Identifier","unusedVar","'PrivateRoute' is defined but never used.","'useState' is defined but never used.","'Checkbox' is defined but never used.","'Header' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'imageSquare' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'axios' is defined but never used.","'Addproductmodal' is defined but never used.","'TableProducts' is defined but never used.","'CREDENTIALS' is defined but never used.","'product_id' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'ProductFetch'. Either include it or remove the dependency array. If 'ProductFetch' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["250"],"'onChange' is assigned a value but never used.","'Component' is defined but never used.","'Dropdown' is defined but never used.","'Logout' is defined but never used.","'Divider' is defined but never used.","React Hook useEffect has a missing dependency: 'GetAddToCart'. Either include it or remove the dependency array. If 'GetAddToCart' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["251"],"'Card' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'GetAddToCart', 'GetRestaurantOrder', and 'carts'. Either include them or remove the dependency array. If 'GetAddToCart' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["252"],"'value' is assigned a value but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'ITableModalsAccept' is defined but never used.","'ITableModalsDecline' is defined but never used.","'ITableModalsPartial' is defined but never used.","'secondOpen' is assigned a value but never used.","'thirdOpen' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'GetInquires'. Either include it or remove the dependency array. If 'GetInquires' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["253"],"'Form' is defined but never used.","'Icon' is defined but never used.","'Modal' is defined but never used.","'Input' is defined but never used.","'URL' is defined but never used.","React Hook useEffect has a missing dependency: 'GetSupplierOrder'. Either include it or remove the dependency array. If 'GetSupplierOrder' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["254"],"'Link' is defined but never used.","'Button' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'TOKEN' is defined but never used.","'useHistory' is defined but never used.","Unexpected default export of anonymous function","no-global-assign","no-unsafe-negation",{"desc":"255","fix":"256"},{"desc":"257","fix":"258"},{"desc":"259","fix":"260"},{"desc":"261","fix":"262"},{"desc":"263","fix":"264"},"Update the dependencies array to be: [ProductFetch]",{"range":"265","text":"266"},"Update the dependencies array to be: [GetAddToCart]",{"range":"267","text":"268"},"Update the dependencies array to be: [GetAddToCart, GetRestaurantOrder, carts]",{"range":"269","text":"270"},"Update the dependencies array to be: [GetInquires]",{"range":"271","text":"272"},"Update the dependencies array to be: [GetSupplierOrder]",{"range":"273","text":"274"},[855,857],"[ProductFetch]",[559,561],"[GetAddToCart]",[1017,1019],"[GetAddToCart, GetRestaurantOrder, carts]",[1105,1107],"[GetInquires]",[753,755],"[GetSupplierOrder]"]